In your current index.ts, you do:

ts
Copy code
server.on('upgrade', (request, socket, head) => {
  if (request.headers['sec-websocket-protocol'] === 'vite-hmr') {
    return;
  }
  
  // NEW WebSocketServer every time!
  const wss = new WebSocketServer({ noServer: true });
  wss.handleUpgrade(request, socket, head, (ws) => {
    wss.emit('connection', ws, request);
  });
});
This means every time a new client attempts to upgrade the connection to WebSocket, you create a fresh new WebSocketServer({ noServer: true }). If you don’t hold onto that new wss object, it’s effectively “floating” in memory. You never store it in a variable that persists, so:

The brand-new WebSocketServer instance is created, upgrades exactly one connection, and then you never refer to it again.
If another client tries to connect later, a second WebSocketServer object is created (and so on).
Worse, because you never store each wss in some array or keep references, the server may treat them as ephemeral or garbage-collect them. Any “global” ping/pong or broadcast logic won’t work properly with an ephemeral wss.
What to Do Instead
Usually, you want one single WebSocketServer instance that is attached to your HTTP server. Two common patterns:

Directly attach to the HTTP server (auto-upgrade):

ts
Copy code
const wss = new WebSocketServer({ server }); // No `noServer: true`
wss.on('connection', (ws) => {
  // handle ws
});
Then you remove the upgrade event handler in index.ts entirely. The ws library automatically picks up the upgrade handshake on that single server.
Use server.on('upgrade') but keep one WSS:

ts
Copy code
const wss = new WebSocketServer({ noServer: true });

server.on('upgrade', (req, socket, head) => {
  if (req.headers['sec-websocket-protocol'] === 'vite-hmr') {
    return;
  }
  wss.handleUpgrade(req, socket, head, (clientSocket) => {
    wss.emit('connection', clientSocket, req);
  });
});
But crucially, you do not create a new WebSocketServer inside the upgrade callback. You create it once outside. The same wss handles all future connections.
Either way, you should also remove or replace the ephemeral code in your index.ts that does:

ts
Copy code
const wss = new WebSocketServer({ noServer: true });
every time.

